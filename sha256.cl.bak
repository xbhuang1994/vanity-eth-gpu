// Base SHA-256 context
#define H0 0x6a09e667
#define H1 0xbb67ae85
#define H2 0x3c6ef372
#define H3 0xa54ff53a
#define H4 0x510e527f
#define H5 0x9b05688c
#define H6 0x1f83d9ab
#define H7 0x5be0cd19

// String convert macro
#define STR(s) #s
#define XSTR(s) STR(s)

// Methods
//  << : bitshift left
//  >> : bitshift right
//  ^  : bitwise XOR
//  ~  : bitwise NOT
//  &  : bitwise AND
//  |  : bitwise OR

inline uint rotr(uint x, int n) // Rotate right
{
  return (x >> n) | (x << (32 - n));
}
inline uint ch(uint x, uint y, uint z) // Choice based on x
{
  return (x & y) ^ (~x & z);
}
inline uint maj(uint x, uint y, uint z) // Majority of bits in x, y
{
  return (x & y) ^ (x & z) ^ (y & z);
}
inline uint sig0(uint x) { return rotr(x, 7) ^ rotr(x, 18) ^ (x >> 3); }
inline uint sig1(uint x) { return rotr(x, 17) ^ rotr(x, 19) ^ (x >> 10); }
inline uint csig0(uint x) { return rotr(x, 2) ^ rotr(x, 13) ^ rotr(x, 22); }
inline uint csig1(uint x) { return rotr(x, 6) ^ rotr(x, 11) ^ rotr(x, 25); }

void sha256_to_uchar(const uint keyLength, const uchar *key, uchar *output) {
  // Initialize
  int qua;                     // Message schedule step quantity
  int mod;                     // Message schedule step modulus
  uint A, B, C, D, E, F, G, H; // Compression targets
  uint T1, T2;                 // Compression temp
  uint W[80];                  // Message schedule
  const uint K[64] =           // Cube roots of first 64 primes
      {0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1,
       0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
       0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786,
       0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
       0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,
       0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
       0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b,
       0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
       0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a,
       0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
       0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2};

// Reset algorithm
#pragma unroll
  for (int i = 0; i < 80; i++) {
    W[i] = 0x00000000;
  }

  // Create message block
  qua = keyLength / 4;

  mod = keyLength % 4;
  for (int i = 0; i < qua; i++) {
    W[i] = (key[i * 4 + 0]) << 24;
    W[i] |= (key[i * 4 + 1]) << 16;
    W[i] |= (key[i * 4 + 2]) << 8;
    W[i] |= (key[i * 4 + 3]);
  }

  // Pad remaining uint
  if (mod == 0) {
    W[qua] = 0x80000000;
  } else if (mod == 1) {
    W[qua] = (key[qua * 4]) << 24;
    W[qua] |= 0x800000;
  } else if (mod == 2) {
    W[qua] = (key[qua * 4]) << 24;
    W[qua] |= (key[qua * 4 + 1]) << 16;
    W[qua] |= 0x8000;
  } else {
    W[qua] = (key[qua * 4]) << 24;
    W[qua] |= (key[qua * 4 + 1]) << 16;
    W[qua] |= (key[qua * 4 + 2]) << 8;
    W[qua] |= 0x80;
  }

  W[15] = keyLength * 8; // Add key length

// Run message schedule
#pragma unroll
  for (int i = 16; i < 64; i++) {
    W[i] = sig1(W[i - 2]) + W[i - 7] + sig0(W[i - 15]) + W[i - 16];
  }

  // Prepare compression
  A = H0;
  B = H1;
  C = H2;
  D = H3;
  E = H4;
  F = H5;
  G = H6;
  H = H7;

// Compress
#pragma unroll
  for (int i = 0; i < 64; i++) {
    // Compress temporary
    T1 = H + csig1(E) + ch(E, F, G) + K[i] + W[i];
    T2 = csig0(A) + maj(A, B, C);

    // Rotate over, override H
    H = G;
    G = F;
    F = E;
    E = D + T1;
    D = C;
    C = B;
    B = A;
    A = T1 + T2;
  }

  W[0] = A + H0;
  W[1] = B + H1;
  W[2] = C + H2;
  W[3] = D + H3;
  W[4] = E + H4;
  W[5] = F + H5;
  W[6] = G + H6;
  W[7] = H + H7;
  for (int i = 0; i < 8; i++) {
    output[i * 4 + 0] = (W[i] >> 24) & 0xFF;
    output[i * 4 + 1] = (W[i] >> 16) & 0xFF;
    output[i * 4 + 2] = (W[i] >> 8) & 0xFF;
    output[i * 4 + 3] = W[i] & 0xFF;
  }
}
void uint_to_uchar(const uint len, const uint *hex, uchar *output) {
  for (int i = 0; i < len; i++) {
    output[4 * i] = (uchar)(hex[i] & 0xff);
    output[4 * i + 1] = (uchar)((hex[i] >> 8) & 0xff);
    output[4 * i + 2] = (uchar)((hex[i] >> 16) & 0xff);
    output[4 * i + 3] = (uchar)((hex[i] >> 24) & 0xff);
  }
}
void reverse_array(uchar *array, uint length) {
  for (uint i = 0; i < length / 2; i++) {
    uchar temp = array[i];
    array[i] = array[length - i - 1];
    array[length - i - 1] = temp;
  }
}

void ucharToUint(uchar *input, uint *output, size_t n) {
  for (size_t i = 0; i < n / 4; i++) {
    output[i] = ((uint)input[i * 4] << 24) | ((uint)input[i * 4 + 1] << 16) |
                ((uint)input[i * 4 + 2] << 8) | (uint)input[i * 4 + 3];
  }
}
void eth_to_tron_address(const uint *eth, uchar *tron) {
  const uint len = 6;
  const uint u0_size = 21;
  uchar u0[u0_size];
  uint hash0[len] = {eth[0], eth[1], eth[2], eth[3], eth[4], 0x41};
  uint_to_uchar(len, hash0, u0);
  reverse_array(u0, sizeof(u0));
  char c1[64];
  uchar u1[64];
  sha256_to_uchar(sizeof(u0), u0, u1);
  uchar u2[64];
  sha256_to_uchar(sizeof(u1) / 2, u1, u2);
  for (uint i = 0; i < u0_size; i++) {
    tron[i] = u0[i];
  }
  tron[u0_size] = u2[0];
  tron[u0_size + 1] = u2[1];
  tron[u0_size + 2] = u2[2];
  tron[u0_size + 3] = u2[3];
}

void split_tron_to_20(uchar *tron,uchar *output){
  uint j = 0;
    for (uint i = 0; i < 25;i++){
      if(i <= 10 || i >15){
        output[j] = tron[i];
        j++;
      }
    }
}

void eth_to_tron_split20_address(const uint *eth,uint *output){
  uchar rc[20];
  uchar rc1[25];
  eth_to_tron_address(eth, rc1);
  split_tron_to_20(rc1,rc);
  uchar rc_reverse[20];
  for(int i = 0; i < 20; i++)
    {
        rc_reverse[20 - i - 1] = rc[i];
    }
  ucharToUint(rc_reverse, output, 20);
}
kernel void sha256single_kernel(uint keyLength, global uchar *key,
                                global char *result) {
  const size_t len = 5;
  uint my_uint[len] = {0x9cd2f83c, 0xb08c7ac0, 0x5be2fffd, 0xcab73c2e,
                       0x20c56bd4};
  // uint my_uint[len] = {0x20c56bd4, 0xcab73c2e, 0x5be2fffd,
  // 0xb08c7ac0,0x9cd2f83c};

  // for (uint i = 0; i < len; i++) {
  //   printf("%u \n", my_uint[i]);
  // }
  uint ru[5];
  eth_to_tron_split20_address(my_uint,ru);

  // uchar u0[21];
  // uint_to_uchar(len, my_uint, u0);
  // reverse_array(u0, sizeof(u0));
  for (uint i = 0;i < 5 ;i++){
    printf("%u \n", ru[i]);
  }
}